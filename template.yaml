AWSTemplateFormatVersion: '2010-09-09'
Description: >
  AWS CloudFormation Template to create a VPC with public and private subnets,
  deploy an Apache web server on a public EC2 instance, and a private EC2 instance
  with no public access. Both instances can be accessed via SSM Session Manager.
  The web server displays your full name on the home page.

Parameters:
  VpcCidr:
    Type: String
    Default: 10.0.0.0/16
    Description: CIDR block for the VPC
  PublicSubnetCidr:
    Type: String
    Default: 10.0.1.0/24
    Description: CIDR block for the public subnet (AZ #1)
  PrivateSubnetCidr:
    Type: String
    Default: 10.0.2.0/24
    Description: CIDR block for the private subnet (AZ #2)
  InstanceType:
    Type: String
    Default: t3.micro
    AllowedValues:
      - t3.micro
      - t3.small
    Description: EC2 instance type for both instances
  FullName:
    Type: String
    Default: Sudais Ballah Sumaila
    Description: Your full name to display on the web server home page
  AL2AmiParameter:
    Type: AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>
    Default: /aws/service/ami-amazon-linux-latest/amzn2-ami-hvm-x86_64-gp2
    Description: SSM Parameter for latest Amazon Linux 2 AMI

Mappings: {}

Resources:
  # Networking - VPC
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref VpcCidr
      EnableDnsHostnames: true
      EnableDnsSupport: true
      Tags:
        - Key: Name
          Value: LabVPC

  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: LabIGW

  AttachInternetGateway:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway

  PublicSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Ref PublicSubnetCidr
      AvailabilityZone: !Select [ 0, !GetAZs '' ]
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: PublicSubnet-AZ1

  PrivateSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Ref PrivateSubnetCidr
      AvailabilityZone: !Select [ 1, !GetAZs '' ]
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: PrivateSubnet-AZ2

  # Routing (Public)
  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: PublicRT

  PublicRouteToInternet:
    Type: AWS::EC2::Route
    DependsOn: AttachInternetGateway
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  PublicSubnetRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet
      RouteTableId: !Ref PublicRouteTable

  # NAT for Private Subnet 
  NatEip:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc
      Tags:
        - Key: Name
          Value: NatEip

  NatGateway:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt NatEip.AllocationId
      SubnetId: !Ref PublicSubnet
      Tags:
        - Key: Name
          Value: LabNatGW

  PrivateRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: PrivateRT

  PrivateDefaultRouteToNat:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NatGateway

  PrivateSubnetRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnet
      RouteTableId: !Ref PrivateRouteTable

  # Security Groups
  WebServerSG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow HTTP from internet and ICMP from VPC
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
        - IpProtocol: icmp
          FromPort: -1
          ToPort: -1
          CidrIp: !Ref VpcCidr
      SecurityGroupEgress:
        - IpProtocol: -1
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: Name
          Value: WebServerSG

  PrivateInstanceSG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow ICMP from VPC only
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: icmp
          FromPort: -1
          ToPort: -1
          CidrIp: !Ref VpcCidr
      SecurityGroupEgress:
        - IpProtocol: -1
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: Name
          Value: PrivateInstanceSG

  # IAM Role / Instance Profile for SSM Session Manager
  SsmEc2Role:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub "Lab-SSM-EC2-Role-${AWS::StackName}"
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore
      Path: /

  SsmInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: /
      Roles: [ !Ref SsmEc2Role ]
      InstanceProfileName: !Sub "Lab-SSM-InstanceProfile-${AWS::StackName}"

  # EC2 Instances
  WebServer:
    Type: AWS::EC2::Instance
    Properties:
      ImageId: !Ref AL2AmiParameter
      InstanceType: !Ref InstanceType
      IamInstanceProfile: !Ref SsmInstanceProfile
      NetworkInterfaces:
        - DeviceIndex: 0
          AssociatePublicIpAddress: true
          SubnetId: !Ref PublicSubnet
          GroupSet: [ !Ref WebServerSG ]
      Tags:
        - Key: Name
          Value: PublicWebServer
        - Key: Role
          Value: Web
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash
          yum update -y
          yum install -y httpd
          systemctl enable httpd
          systemctl start httpd
          echo "<!doctype html><html><head><title>Welcome</title></head><body style='font-family: Arial, sans-serif;'><h1>${FullName}</h1><p>Apache Web Server is running on the public instance.</p></body></html>" > /var/www/html/index.html

  PrivateInstance:
    Type: AWS::EC2::Instance
    Properties:
      ImageId: !Ref AL2AmiParameter
      InstanceType: !Ref InstanceType
      IamInstanceProfile: !Ref SsmInstanceProfile
      SubnetId: !Ref PrivateSubnet
      SecurityGroupIds: [ !Ref PrivateInstanceSG ]
      Tags:
        - Key: Name
          Value: PrivateInstance
        - Key: Role
          Value: App

Outputs:
  VpcId:
    Value: !Ref VPC
    Description: VPC ID
  PublicSubnetId:
    Value: !Ref PublicSubnet
    Description: Public subnet ID (AZ1)
  PrivateSubnetId:
    Value: !Ref PrivateSubnet
    Description: Private subnet ID (AZ2)
  WebServerPublicDNS:
    Value: !GetAtt WebServer.PublicDnsName
    Description: Public DNS name of the web server
  WebServerURL:
    Value: !Sub "http://${WebServer.PublicDnsName}"
    Description: URL to access the Apache web page